AWSTemplateFormatVersion: "2010-09-09"
Description: spigot-plugin-deb-packer
Parameters:
  WorkerSubnets:
    Description: List of Subnets to launch the ECS tasks in
    Type: List<AWS::EC2::Subnet::Id>
Resources:
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration: { }
      LifecycleConfiguration:
        Rules:
          - Id: Expiry
            Status: Enabled
            ExpirationInDays: 1
  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
  DebBuilderFargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
  DebBuilderECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageTagMutability: MUTABLE
  DebBuilderECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: s3_download
          MountPoints:
            - SourceVolume: "work"
              ContainerPath: "/work"
          Image: "amazon/aws-cli:2.4.14"
          EntryPoint: ["sh", "-c", "aws s3 cp s3://$JAR_S3_BUCKET/$JAR_S3_KEY /work/plugin.jar"]
          Essential: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
                awslogs-group: !Ref AWS::StackName
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
                awslogs-create-group: true
        - Name: build_deb
          Image: !GetAtt DebBuilderECRRepository.RepositoryUri
          LogConfiguration:
            LogDriver: awslogs
            Options:
                awslogs-group: !Ref AWS::StackName
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs
                awslogs-create-group: true
          DependsOn:
            - ContainerName: s3_download
              Condition: SUCCESS
          VolumesFrom:
            - SourceContainer: s3_download
      Volumes:
        - Name: "work"
      NetworkMode: awsvpc
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      RequiresCompatibilities: [FARGATE]
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt DebBuilderTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt DebBuilderTaskRole.Arn
  DebBuilderTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: publish_to_cloudwatch
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                  - "arn:aws:logs:*:*:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  DebBuilderTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: read_write_sources_bucket
          PolicyDocument:
            Statement:
              - Effect: Deny
                Action: "s3:DeleteBucket"
                Resource:
                  - !Sub "arn:aws:s3:::${InputBucket}"
                  - !Sub "arn:aws:s3:::${OutputBucket}"
              - Effect: Allow
                Action: "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::${InputBucket}/*"
                  - !Sub "arn:aws:s3:::${InputBucket}"
                  - !Sub "arn:aws:s3:::${OutputBucket}/*"
                  - !Sub "arn:aws:s3:::${OutputBucket}"
  RunDebBuilderOnNewObjectRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Runs the deb packer codebuild project when a new object is uploaded in the jarfile
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref InputBucket
      Targets:
        - Id: StartDebBuilder
          Arn: !GetAtt DebBuilderFargateCluster.Arn
          RoleArn: !GetAtt EventBridgeRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref DebBuilderECSTaskDefinition
            EnableECSManagedTags: true
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: "ENABLED"
                Subnets: !Ref WorkerSubnets
          InputTransformer:
            InputPathsMap:
              JAR_S3_BUCKET: $.detail.bucket.name
              JAR_S3_KEY: $.detail.object.key
            InputTemplate: !Sub |
              {
                "containerOverrides": [
                  {
                    "name": "s3_download",
                    "environment": [
                        {
                          "name": "JAR_S3_BUCKET",
                          "value": "<JAR_S3_BUCKET>"
                        },
                        {
                          "name": "JAR_S3_KEY",
                          "value": "<JAR_S3_KEY>"
                        }
                    ]
                  },
                  {
                    "name": "build_deb",
                    "environment": [
                        {
                          "name": "APT_S3_BUCKET",
                          "value": "${OutputBucket}"
                        }
                    ]
                  }
                ]
              }
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: pass_iam_role
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - !GetAtt DebBuilderTaskExecutionRole.Arn
                  - !GetAtt DebBuilderTaskRole.Arn
        - PolicyName: run_debbuilder_task
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:RunTask"
                Resource:
                  - !Ref DebBuilderECSTaskDefinition
Outputs:
  DebBuilderRepositoryLink:
    Description: Build the dockerfile and push to this URI
    Value: !GetAtt DebBuilderECRRepository.RepositoryUri
  InputBucket:
    Description: Dump your jarfiles here
    Value: !Ref InputBucket
  APTRepositoryConfig:
    Description: Add this to your debian sources.list
    Value: !Sub "deb [arch=all trusted=yes] http://${OutputBucket.RegionalDomainName} spigot-plugins main"
